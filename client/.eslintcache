[{"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\App.jsx":"1","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\Canvas.jsx":"2","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\Main.jsx":"3","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\SignIn.jsx":"4","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\ModePick.jsx":"5"},{"size":2158,"mtime":1606919774208,"results":"6","hashOfConfig":"7"},{"size":4540,"mtime":1606910839604,"results":"8","hashOfConfig":"7"},{"size":3399,"mtime":1606920419135,"results":"9","hashOfConfig":"7"},{"size":4335,"mtime":1606906829424,"results":"10","hashOfConfig":"7"},{"size":2999,"mtime":1606919962773,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"uqk290",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\App.jsx",[],"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\Canvas.jsx",[],"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\Main.jsx",["23","24"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { UserContext } from '../context/UserContext';\r\nimport Canvas from './Canvas';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button } from '@material-ui/core';\r\nimport { socket } from '../socket/Socket'\r\n\r\nconst Main = ({ gameStatus, modePicked, words, mode }) => {\r\n    const { role } = useContext(UserContext);\r\n    const [word, setWord] = useState('');\r\n    const [changeWord, setChangeWord] = useState(false);\r\n    const [guess, setGuess] = useState('');\r\n    const [score, setScore] = useState(0);\r\n    const [difficulty, setDifficulty] = useState('')\r\n    useEffect(() => {\r\n        // Generate random word\r\n        if (role === \"draw\") {\r\n            const index = Math.floor(Math.random() * words.length);\r\n            setWord(words[index].word);\r\n            setDifficulty(words[index].mode)\r\n        }\r\n    }, [changeWord])\r\n\r\n    useEffect(() => {\r\n        // if (word === \"\") return;\r\n        socket.on('check answer', guess => {\r\n            if (guess === word.toLocaleLowerCase()) {\r\n                setChangeWord(prevState => !prevState);\r\n                if (difficulty === \"easy\") {\r\n                    setScore(score + 1)\r\n                    socket.emit('right answer', score + 1);\r\n                }\r\n                else if (difficulty === \"normal\") {\r\n                    socket.emit('right answer', score + 3);\r\n                    setScore(score + 3)\r\n                }\r\n                else if (difficulty === \"hard\") {\r\n                    socket.emit('right answer', score + 5);\r\n                    setScore(score + 5)\r\n                }\r\n            }\r\n        })\r\n        // Clear event listeners\r\n        return () => {\r\n            socket.off('check answer')\r\n        }\r\n    }, [word])\r\n\r\n    useEffect(() => {\r\n        socket.on('right answer', (score) => {\r\n            setGuess('')\r\n            setScore(score)\r\n        })\r\n        return () => socket.off('right answer')\r\n    }, [])\r\n\r\n    const handleSubmit = () => { socket.emit('check answer', guess) }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            {gameStatus && modePicked ? <>\r\n                {role === \"draw\" ? <h2>Draw - {word}</h2> : \"\"}\r\n                <h3>Score : {score}</h3>\r\n                <Canvas changeWord={changeWord} setChangeWord={setChangeWord} /> </> :\r\n                <><AccessTimeIcon fontSize=\"large\" />\r\n                    <Typography paragraph align=\"center\" variant=\"h2\" >\r\n                        Waiting For 2nd Player...\r\n                 </Typography><AccessTimeIcon fontSize=\"large\" /> </>}\r\n            {role === \"guess\" && gameStatus && modePicked ? <>\r\n                <TextField\r\n                    onChange={e => setGuess(e.target.value)}\r\n                    value={guess}\r\n                    id=\"standard-basic\"\r\n                    label=\"Place Your Guess Here !\" />\r\n                <Button\r\n                    onClick={() => handleSubmit()}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    style={{ marginTop: \"20px\" }}\r\n                >\r\n                    Submit Your Answer\r\n                 </Button>\r\n            </> : \"\"}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\SignIn.jsx",[],"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\ModePick.jsx",["25"],{"ruleId":"26","severity":1,"message":"27","line":24,"column":8,"nodeType":"28","endLine":24,"endColumn":20,"suggestions":"29"},{"ruleId":"26","severity":1,"message":"30","line":49,"column":8,"nodeType":"28","endLine":49,"endColumn":14,"suggestions":"31"},{"ruleId":"26","severity":1,"message":"32","line":27,"column":8,"nodeType":"28","endLine":27,"endColumn":14,"suggestions":"33"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'role' and 'words'. Either include them or remove the dependency array. If 'setWord' needs the current value of 'words', you can also switch to useReducer instead of useState and read 'words' in the reducer.","ArrayExpression",["34"],"React Hook useEffect has missing dependencies: 'difficulty' and 'score'. Either include them or remove the dependency array. You can also do a functional update 'setScore(s => ...)' if you only need 'score' in the 'setScore' call.",["35"],"React Hook useEffect has missing dependencies: 'history', 'setModePicked', and 'setWords'. Either include them or remove the dependency array. If 'setModePicked' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["36"],{"desc":"37","fix":"38"},{"desc":"39","fix":"40"},{"desc":"41","fix":"42"},"Update the dependencies array to be: [changeWord, role, words]",{"range":"43","text":"44"},"Update the dependencies array to be: [difficulty, score, word]",{"range":"45","text":"46"},"Update the dependencies array to be: [history, mode, setModePicked, setWords]",{"range":"47","text":"48"},[1027,1039],"[changeWord, role, words]",[1918,1924],"[difficulty, score, word]",[1128,1134],"[history, mode, setModePicked, setWords]"]