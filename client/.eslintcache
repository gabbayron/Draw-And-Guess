[{"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\App.jsx":"1","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\Canvas.jsx":"2","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\Main.jsx":"3","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\SignIn.jsx":"4","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\ModePick.jsx":"5","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\index.js":"6","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\Header.jsx":"7","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\socket\\Socket.jsx":"8","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\context\\UserContext.jsx":"9","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\HighScores.jsx":"10"},{"size":2048,"mtime":1607014441628,"results":"11","hashOfConfig":"12"},{"size":7190,"mtime":1607031006349,"results":"13","hashOfConfig":"12"},{"size":3546,"mtime":1607030818260,"results":"14","hashOfConfig":"12"},{"size":4977,"mtime":1607027214669,"results":"15","hashOfConfig":"12"},{"size":3014,"mtime":1607012786006,"results":"16","hashOfConfig":"12"},{"size":500,"mtime":1606906102416,"results":"17","hashOfConfig":"12"},{"size":1198,"mtime":1607014748377,"results":"18","hashOfConfig":"12"},{"size":87,"mtime":1606945658094,"results":"19","hashOfConfig":"12"},{"size":88,"mtime":1606945662941,"results":"20","hashOfConfig":"12"},{"size":2689,"mtime":1607027203739,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"uqk290",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\App.jsx",[],"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\Canvas.jsx",["43"],"import { Button } from '@material-ui/core';\r\nimport React, { useRef, useEffect, useState, useContext } from 'react';\r\nimport { TwitterPicker } from 'react-color'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useWindowSize } from '@react-hook/window-size';\r\nimport { UserContext } from '../context/UserContext';\r\nimport { socket } from '../socket/Socket'\r\nimport { useHistory } from 'react-router-dom';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport BackupIcon from '@material-ui/icons/Backup';\r\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nconst Canvas = ({ changeWord, setChangeWord, score, user2 }) => {\r\n\r\n    const canvasRef = useRef(null);\r\n    const contextRef = useRef(null);\r\n    const [isDrawing, setIsDrawing] = useState(false);\r\n    const [color, setColor] = useState('black');\r\n    const [open, setOpen] = useState(false);\r\n    const [winWidth, winHeight] = useWindowSize();\r\n    const { role, nickName } = useContext(UserContext);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        canvas.height = winHeight * 0.4;\r\n        canvas.width = winWidth * 0.9;\r\n        const context = canvas.getContext(\"2d\");\r\n        context.scale(1, 1);\r\n        context.lineCap = \"round\";\r\n        context.lineWidth = 3;\r\n        contextRef.current = context;\r\n    }, [winWidth, winHeight]);\r\n\r\n    useEffect(() => {\r\n        socket.on('start draw', ({ x, y }) => {\r\n            if (!contextRef.current) return;\r\n            contextRef.current.beginPath();\r\n            contextRef.current.moveTo(x, y);\r\n        })\r\n        socket.on('draw', (data) => {\r\n            if (!contextRef.current) return;\r\n            contextRef.current.lineTo(data.x, data.y);\r\n            contextRef.current.strokeStyle = data.color.hex;\r\n            contextRef.current.stroke();\r\n        })\r\n        socket.on('finish draw', () => {\r\n            if (!contextRef.current) return;\r\n            contextRef.current.closePath();\r\n        })\r\n        socket.on('clear', () => {\r\n            if (!contextRef.current) return;\r\n            contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n        })\r\n        socket.on('right answer', () => {\r\n            if (!contextRef.current) return;\r\n            contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n        })\r\n        socket.on('mode picked', () => {\r\n            if (!contextRef.current) return;\r\n            contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n        })\r\n    }, []);\r\n\r\n    const startDrawing = (e) => {\r\n        if (role === \"guess\") return;\r\n        const rect = canvasRef.current.getBoundingClientRect();\r\n        const touch = e.touches[0];\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(touch.clientX - rect.x, touch.clientY - rect.y);\r\n        setIsDrawing(true);\r\n        socket.emit('start draw', ({ x: touch.clientX - rect.x, y: touch.clientY - rect.y }));\r\n    };\r\n\r\n    const draw = (e) => {\r\n        if (!isDrawing) return;\r\n        if (role === \"guess\") return;\r\n        const touch = e.touches[0];\r\n        const rect = canvasRef.current.getBoundingClientRect();\r\n        contextRef.current.strokeStyle = color.hex;\r\n        contextRef.current.lineTo(touch.clientX - rect.x, touch.clientY - rect.y);\r\n        contextRef.current.stroke();\r\n        socket.emit('draw', ({ x: touch.clientX - rect.x, y: touch.clientY - rect.y, color }));\r\n    };\r\n\r\n    const finishDrawing = () => {\r\n        if (role === \"guess\") return;\r\n        contextRef.current.closePath();\r\n        setIsDrawing(false);\r\n        socket.emit('finish draw');\r\n    };\r\n    \r\n    const clear = () => {\r\n        contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n        socket.emit('clear');\r\n    };\r\n\r\n    const handleTooltipOpen = () => {\r\n        setOpen(true);\r\n        setTimeout(() => { setOpen(false) }, 1500);\r\n    };\r\n\r\n    const submitScore = async () => {\r\n        if (score === 0) return;\r\n        handleTooltipOpen()\r\n        let res = await fetch('http://localhost:4000/scores', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ user1: nickName, user2, score }),\r\n            headers: { \"content-type\": \"application/json\" }\r\n        })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"canvas\" style={{ marginBottom: \"20px\" }}>\r\n                <canvas id=\"canvas\"\r\n                    onTouchStart={startDrawing}\r\n                    onTouchEnd={finishDrawing}\r\n                    onTouchMove={draw}\r\n                    ref={canvasRef}\r\n                />\r\n            </div>\r\n            {role === \"draw\" ? <> <TwitterPicker color={color} onChange={setColor} />\r\n                <div className=\"gameButtons\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        startIcon={<AddIcon />}\r\n                        style={{ marginTop: \"20px\" }}\r\n                        onClick={() => setChangeWord(!changeWord)}\r\n                    >\r\n                        Generate New Word\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        startIcon={<DeleteIcon />}\r\n                        style={{ marginTop: \"20px\" }}\r\n                        onClick={clear}\r\n                    >\r\n                        Clear Canvas\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        startIcon={<SportsEsportsIcon />}\r\n                        style={{ marginTop: \"20px\" }}\r\n                        onClick={() => history.push('/mode')}\r\n                    >\r\n                        New Game\r\n                    </Button>\r\n                    <Tooltip\r\n                        PopperProps={{\r\n                            disablePortal: true,\r\n                        }}\r\n                        open={open}\r\n                        onClose={() => setOpen(false)}\r\n                        disableFocusListener\r\n                        disableHoverListener\r\n                        disableTouchListener\r\n                        title=\"Score Submited\"\r\n                    >\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            startIcon={<BackupIcon />}\r\n                            style={{ marginTop: \"20px\" }}\r\n                            onClick={submitScore}\r\n                        >\r\n                            Submit Your Score\r\n                    </Button>\r\n                    </Tooltip>\r\n                </div> </>\r\n                : \"\"}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Canvas;\r\n\r\n<Button\r\n    variant=\"contained\"\r\n    color=\"secondary\"\r\n    startIcon={<BackupIcon />}\r\n    style={{ marginTop: \"20px\" }}\r\n>\r\n    Submit Your Score\r\n</Button>","C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\Main.jsx",["44","45"],"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\SignIn.jsx",[],"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\ModePick.jsx",["46"],"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\index.js",[],"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\Header.jsx",[],"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\socket\\Socket.jsx",[],"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\context\\UserContext.jsx",[],"C:\\Users\\User\\Desktop\\John Brice Course\\Inerviwes problems\\Moveo\\moveo\\Draw-And-Guess\\client\\src\\components\\HighScores.jsx",[],{"ruleId":"47","severity":1,"message":"48","line":106,"column":13,"nodeType":"49","messageId":"50","endLine":106,"endColumn":16},{"ruleId":"51","severity":1,"message":"52","line":25,"column":8,"nodeType":"53","endLine":25,"endColumn":20,"suggestions":"54"},{"ruleId":"51","severity":1,"message":"55","line":46,"column":8,"nodeType":"53","endLine":46,"endColumn":14,"suggestions":"56"},{"ruleId":"51","severity":1,"message":"57","line":27,"column":8,"nodeType":"53","endLine":27,"endColumn":14,"suggestions":"58"},"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'role' and 'words'. Either include them or remove the dependency array. If 'setWord' needs the current value of 'words', you can also switch to useReducer instead of useState and read 'words' in the reducer.","ArrayExpression",["59"],"React Hook useEffect has missing dependencies: 'difficulty' and 'score'. Either include them or remove the dependency array. You can also do a functional update 'setScore(s => ...)' if you only need 'score' in the 'setScore' call.",["60"],"React Hook useEffect has missing dependencies: 'history', 'setModePicked', and 'setWords'. Either include them or remove the dependency array. If 'setModePicked' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["61"],{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [changeWord, role, words]",{"range":"68","text":"69"},"Update the dependencies array to be: [difficulty, score, word]",{"range":"70","text":"71"},"Update the dependencies array to be: [history, mode, setModePicked, setWords]",{"range":"72","text":"73"},[1088,1100],"[changeWord, role, words]",[1938,1944],"[difficulty, score, word]",[1136,1142],"[history, mode, setModePicked, setWords]"]